#!/usr/bin/env groovy

import java.text.*

public class GrailsSwitcher {
	private static String version = 0.1
	
	// hidden folder that get's placed in user home
	private static String GSWITCH_PATH = "/.gswitch"
	//url pattern for downloading Grails versions. This may change in the future
	private static String VERSIONS_REPO_URL = "http://dist.springframework.org.s3.amazonaws.com/release/GRAILS/grails-" //plus version.zip

	private String userHome = ""
	private CliBuilder cli

	def GrailsSwitcher(){
		//construct the CLI options
		userHome = System.getProperty("user.home")
		cli = new CliBuilder(usage:"gswitch [options] <version>")
		cli.h(longOpt:"help", "Display this message")
		cli.versions("Lists currently installed Grails versions")
		cli.i( longOpt:"install", args:1, argName:"version", "Installs the specified version, if it exists")
		//cli.set(args:1, argName:"version", "Sets the active Grails version")
		cli.init("Initializes gswitch")

	}

	/**
		Convenience method for building the path to the symlink. This path should be set to your $GRAILS_HOME, and $GRAILS_HOME/bin should be in your path
	*/
	String symPath(){
		userHome+GSWITCH_PATH+"/grails"
	}

	/**
		Convenience method for building the path to where the downloaded Grails version will be set
	**/
	String versionsPath(){
		userHome+GSWITCH_PATH+"/versions"
	}

	String versionFolderPath( gv ){
		versionsPath() +"/grails-${gv}"
	}


	/**
		Prints help information
	**/
	def writeHelp(){
		println "GrailsSwitcher v ${version}"
		cli.usage()
		println "Executing 'gswitch <version>' wiill set the current environment's Grails version, if available"
	}

	/**
		Executed on first run; builds the relevant directories
	**/
	def init( ){
		//create the base directories
		File versions = new File(userHome +GSWITCH_PATH+"/versions")
		versions.mkdirs()
	}

	def isFirstRun(){
		File gswitchHome = new File(userHome + GSWITCH_PATH)
		!gswitchHome.exists()
	}

	def installVersion( targetVersion ){
		println "Installing ${targetVersion}"
		println "Downloading..."
		
		String versionPath = versionFolderPath( targetVersion )
		String zipPath = versionPath+".zip"
		FileOutputStream zipFile
		BufferedOutputStream out
		try{
			//attempt to download a new version
			zipFile = new FileOutputStream(zipPath)
    		out = new BufferedOutputStream(zipFile)
    		out << new URL(VERSIONS_REPO_URL +targetVersion +".zip").openStream()
    		out.close()
    	}
    	catch(java.io.FileNotFoundException fnfe){
    		println "Version '${targetVersion}' does not appear to be a valid Grails version number."
    		//clean up
    		out.close()
    		new File(zipPath).delete()
    	}


    	//unzip
    	if(new File(zipPath).exists()){
    		def ant = new AntBuilder()
    		ant.unzip( src: zipPath, dest: versionsPath(), overWrite:true)	
    	}
    	
    	//check complete
    	if(new File(versionPath).exists()){
    		//set executable permissions on the bin folder, just in case
    		new File(versionPath+"/bin").eachFile{
    			it.setExecutable(true)
    		}
    		println "Version '${targetVersion}' installed. Run gswitch again to set the version."
    		new File(zipPath).delete()
    	}
    	else{
    		println "Version '${targetVersion}' not installed correctly. Ensure you have selected a proper version."
    	}

	}

	def getInstalledVersions(){
		List versions = []
		new File(versionsPath()).eachDir {
			versions.add(it.absolutePath.split("-")[-1])
		}
		versions		
	}


	def listInstalledVersions(){
		println "Installed Grails Versions:"
		/*
		new File(versionsPath()).eachDir {
			print "\t"
			print it.absolutePath.split("-")[-1]

			print "\n"
		}
		*/
		getInstalledVersions().each{
			println "\t${it}"	
		}	
	}

	def replaceSymLink( String path ){
		//first, remove the old link, if exists
		
		try{
			File link = new File( symPath() )
			if(link.exists()){
				link.delete()	
			}
		}
		catch(Exception e){
			println "error!"
		}
		
		// now, create
		if(new File(path).exists()){
			['ln', '-s', path, symPath()].execute().waitFor() 
		}
		else{
			println "Error: Could not create a symlink."
		}

	}


	def setVersion( targetVersion ){
		if(targetVersion in getInstalledVersions()){
			println "Setting to version ${targetVersion}"
			replaceSymLink( versionFolderPath( targetVersion ))
		}
		else{
			println "Version '${targetVersion}' does not appear to be installed"
		}

	}


	def go(args){
		//def cli = new CliBuilder(usage:"gswitch [version]"),
		def	targetVersion = "",
			options = cli.parse(args)		


		if( isFirstRun() ){
			println "Configuring folders..."
			init()
		}
		
		if(!options || options.h){
			writeHelp()
		}
		else if( options.init){
			init()
		}		
		else if(options.i){
			installVersion( options.i )
		}
		else if(options.versions){
			listInstalledVersions()
		}
		else if(!options.arguments()){
			writeHelp()	
		}
		else{
			setVersion(options.arguments()[0])
		}

	}
}

def gswitch = new GrailsSwitcher()
gswitch.go( this.args )
