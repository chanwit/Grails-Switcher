#!/usr/bin/env groovy
import java.text.*
public class GrailsSwitcher {
	//environment variant: your GRAILS_HOME setting
	private static String GRAILS_ENV = "GRAILS_HOME"
	//environment variable: path to your Grails version folders
	private static String GSWITCH_ENV = "GRAILS_PATH"

	private static String GSWITCH_PATH = "/.gswitch"

	private File grailsFoldersPath
	private File grailsHome
	def env
	private String userHome = ""

	def GrailsSwitcher(){

		/**
			1. check for the .gswitch folder, if exists
				-if so, proceed
				- if not, print message and create
			2. verify that the $GRAILS_HOME has been set to the GSWITCH_PATH/grails


		*/

		env = System.getenv()
		userHome = System.getProperty("user.home")
		
		/*
		try{
			//grailsFoldersPath = new File( userHome +GSWITCH_PATH);
			//grailsHome = new File(env[ GRAILS_ENV ])
		}
		catch(NullPointerException npe){
			
		}
		*/



	}

	def exists(File f){
		boolean exists = false
		if(f.size()){
			exists = true
		}
		return exists
	}

	def listGrailsVersions(){
		
		List grailsFolders = getFolders()
		Boolean present = false

		if(grailsFolders){
			present = true
			println "Valid versions:\n"
			grailsFolders.each {
				println it.split("grails-")[1]
			}
			println "\n"
		}
		else{
			println "No Grails versions found in your ${GSWITCH_ENV} of '${grailsHome.absolutePath}' !"
		}

		present
		
	}

	def getFolders(){
		List grailsFolders = []
		
		grailsFoldersPath.eachDir {
			if(it.name.startsWith("grails-")){
				grailsFolders.add(it.name)
			}
		}
		grailsFolders
	}


	def replaceSymLink( File path, String linkPath  ){
		//first, remove the old link, if exists

		try{
			File link = new File(linkPath)
			link.delete()	
		}
		catch(Exception e){
			println e.message()
		}
		
		// now, create
		['ln', '-s', path.absolutePath, linkPath].execute().waitFor() 
	}

	File loadPath(version){
		String path = grailsFoldersPath.absolutePath+"/grails-"+version
		try{
			return new File(path)
		}
		catch(NullPointerException npe){
			println "${path} does not appear to be valid"
			return null
		}
	}

	/**
		

	**/
	def switch(args){
		/*
		if(!grailsFoldersPath){
			println "Could not detect the '${GSWITCH_ENV}' environment variable... please ensure that it is set on your system, and points to the location of your Grails versions' folders."
			return false
		}
		else if(!grailsHome){
			println "Could not detect the '${GRAILS_ENV}' environment variable."
			return false
		}
		*/

		def cli = new CliBuilder(usage:"gswitch [version]"),
			targetVersion = "",
			options = cli.parse(args)

		if(!options.arguments()){
			//look at the available versions
			listGrailsVersions()
			return false
		}
		
		//switch version!
		targetVersion = options.arguments()[0]
		File versionPath = loadPath(targetVersion)
		if( exists(versionPath) ){
			println "Switching to version: "+targetVersion
			replaceSymLink(versionPath, grailsHome.absolutePath)
			println "Switch complete. Grails now set to version ${targetVersion}"
			
		}
		else{
			println "Could not find ${targetVersion} at this path: ${versionPath}."
			listGrailsVersions()
			return false
		}

	}	

}


def gswitch = new GrailsSwitcher()
gswitch.switch(this.args)
